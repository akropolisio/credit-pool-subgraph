type User @entity {
  "address"
  id: ID!
  lBalance: BigInt!
  pBalance: BigInt!
  pInterestSum: BigInt!
  pLockedSum: BigInt!
  unlockLiquiditySum: BigInt!
  credit: BigInt!
  lastDistributionIndex: BigInt

  pledges: [Pledge!]! @derivedFrom(field: "pledger")
  debts: [Debt!]! @derivedFrom(field: "borrower")
  lends: [Debt!]! @derivedFrom(field: "supporters")
}

type UserSnapshot @entity {
  id: ID!
  date: BigInt!
  user: String!
  lBalance: BigInt!
  pBalance: BigInt!
  pLockedSum: BigInt!
  pInterestSum: BigInt!
  unlockLiquiditySum: BigInt!
  credit: BigInt!
}

type ExitBalance @entity {
  id: ID!
  date: BigInt!
  user: User!
  lBalance: BigInt!
  pBalance: BigInt!
}

type BalanceChange @entity {
  id: ID!
  date: BigInt!
  user: User!
  amount: BigInt!
  type: BalanceChangeType!
}

type Earning @entity {
  id: ID!
  date: BigInt!
  user: User!
  pAmount: BigInt!
  lAmount: BigInt!
  type: DistributionType!
  distributionEvent: DistributionEvent
}

type Debt @entity {
  "keccak256(borrowerAddress + proposalId)"
  id: ID!
  debt_id: BigInt # on chain
  proposal_id: String! # on chain
  description: Bytes!
  apr: BigInt!
  borrower: User!
  supporters: [User!]!
  pledges: [Pledge!]!
  total: BigInt!
  repayed: BigInt!
  lStaked: BigInt!
  pStaked: BigInt!
  status: Status!
  stakeProgress: String!
  start_date: BigInt
  last_update: BigInt
}

type Pledge @entity {
  "keccak256(supporterAddress + borrowerAddress + proposalId)"
  id: ID!
  pledger: User!
  debt: Debt!
  lInitialLocked: BigInt!
  pInitialLocked: BigInt!
  pLocked: BigInt!
  unlockLiquidity: BigInt!
  pInterest: BigInt!
}

type Pool @entity {
  id: ID!
  lBalance: BigInt!
  lDebt: BigInt!
  lProposals: BigInt!
  pEnterPrice: BigInt!
  pExitPrice: BigInt!
  users: [String!]!
  usersLength: BigInt!
  depositSum: BigInt!
  withdrawSum: BigInt!
  proposalsCount: BigInt!
  debtsCount: BigInt!
  maxProposalInterest: BigInt!
}

type DistributionEvent @entity {
  id: ID!
  amount: BigInt!
  claimed: BigInt!
  totalSupply: BigInt!
  date: BigInt!
  poolState: Pool!

  claims: [Earning!]! @derivedFrom(field: "distributionEvent")
}

type DefiHandlerCash @entity {
  id: ID!
  lastDefiAPR: ID
}

type CommonHandlerCash @entity {
  id: ID!
  lastPoolSnapshot: ID!
  nextDistributionEventIndex: BigInt!
  proposalInterests: [BigInt!]!
  proposalInterestCounts: [Int!]!
}

type DefiAPR @entity {
  id: ID!
  dateFrom: BigInt!
  dateTo: BigInt!
  amountFrom: BigInt!
  amountTo: BigInt!
  duration: BigInt!
  apr: BigInt!
  aprDecimals: Int!
}

type PoolModule @entity {
  "module address"
  id: ID!
  name: String!
}

enum Status {
  PROPOSED
  EXECUTED
  PARTIALLY_REPAYED
  CLOSED
}

enum DistributionType {
  DEBT_INTEREST
  POOL_DISTRIBUTIONS
}

enum BalanceChangeType {
  DEPOSIT
  WITHDRAW
}
