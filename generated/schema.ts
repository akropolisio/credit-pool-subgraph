// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get lBalance(): BigInt {
    let value = this.get("lBalance");
    return value.toBigInt();
  }

  set lBalance(value: BigInt) {
    this.set("lBalance", Value.fromBigInt(value));
  }

  get pBalance(): BigInt {
    let value = this.get("pBalance");
    return value.toBigInt();
  }

  set pBalance(value: BigInt) {
    this.set("pBalance", Value.fromBigInt(value));
  }

  get locked(): BigInt {
    let value = this.get("locked");
    return value.toBigInt();
  }

  set locked(value: BigInt) {
    this.set("locked", Value.fromBigInt(value));
  }

  get credit(): BigInt {
    let value = this.get("credit");
    return value.toBigInt();
  }

  set credit(value: BigInt) {
    this.set("credit", Value.fromBigInt(value));
  }

  get activeProposals(): Array<BigInt> {
    let value = this.get("activeProposals");
    return value.toBigIntArray();
  }

  set activeProposals(value: Array<BigInt>) {
    this.set("activeProposals", Value.fromBigIntArray(value));
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proposal", id.toString(), this);
  }

  static load(id: string): Proposal | null {
    return store.get("Proposal", id) as Proposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }
}

export class Staker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Staker entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Staker entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Staker", id.toString(), this);
  }

  static load(id: string): Staker | null {
    return store.get("Staker", id) as Staker | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakedPTK(): BigInt {
    let value = this.get("stakedPTK");
    return value.toBigInt();
  }

  set stakedPTK(value: BigInt) {
    this.set("stakedPTK", Value.fromBigInt(value));
  }
}

export class Debt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Debt entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Debt entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Debt", id.toString(), this);
  }

  static load(id: string): Debt | null {
    return store.get("Debt", id) as Debt | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get total(): BigInt {
    let value = this.get("total");
    return value.toBigInt();
  }

  set total(value: BigInt) {
    this.set("total", Value.fromBigInt(value));
  }

  get repayed(): BigInt {
    let value = this.get("repayed");
    return value.toBigInt();
  }

  set repayed(value: BigInt) {
    this.set("repayed", Value.fromBigInt(value));
  }

  get pledgers(): Array<Bytes> {
    let value = this.get("pledgers");
    return value.toBytesArray();
  }

  set pledgers(value: Array<Bytes>) {
    this.set("pledgers", Value.fromBytesArray(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lBalance(): BigInt {
    let value = this.get("lBalance");
    return value.toBigInt();
  }

  set lBalance(value: BigInt) {
    this.set("lBalance", Value.fromBigInt(value));
  }

  get lDebt(): BigInt {
    let value = this.get("lDebt");
    return value.toBigInt();
  }

  set lDebt(value: BigInt) {
    this.set("lDebt", Value.fromBigInt(value));
  }

  get pEnterPrice(): i32 {
    let value = this.get("pEnterPrice");
    return value.toI32();
  }

  set pEnterPrice(value: i32) {
    this.set("pEnterPrice", Value.fromI32(value));
  }

  get pExitPrice(): i32 {
    let value = this.get("pExitPrice");
    return value.toI32();
  }

  set pExitPrice(value: i32) {
    this.set("pExitPrice", Value.fromI32(value));
  }

  get loans(): BigInt {
    let value = this.get("loans");
    return value.toBigInt();
  }

  set loans(value: BigInt) {
    this.set("loans", Value.fromBigInt(value));
  }
}
